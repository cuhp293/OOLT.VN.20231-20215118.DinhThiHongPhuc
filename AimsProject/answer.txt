Lab02:
	1. If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category.
	Does JAVA allow you to do this?
	    Answer: Java cho phép làm điều đó nhưng không nên làm như vậy
	            Vì tiêu đề của mỗi dvd thì khác nhau còn category thì có thể chưa nhiều dvd dẫn đến bị trùng.
	            Vậy nên tạo đối tượng thông qua category thì sẽ không thể phân biệt được các đối tượng với nhau được.
	            
	2. After the call of 'swap(jungleDVD, cinderellaDVD)' why does the title of these two objects still remain?
	After the call of 'changeTitle(jungleDVD, cinderellaDVD.getTitle())' why is the title of the JungleDVD changed?
	    Answer: - Khi gọi hàm swap thì 2 đối tượng tạo 1 bản sao trên stack và truyền vào.
	              Vì vậy khi thực hiện swap thì là chỉ thực hiện với bản sao mà không phải bản chính.
	            - Khi gọi changeTitle thì thực hiện tạo 1 bản sao của DVD trên stack và truyền vào.
	              Khi setTitle thì khiến cho dữ liệu trên heap thay đổi khiến cho bản gốc cũng thay đổi theo.
	              Còn dvd bản sao được gán bằng đối tượng mới tức là bản sao được gán bằng đối tượng mới chứ không phải bản gốc nên bản gốc vẫn không đổi.
	              
Lab03:
	Question: Alternatively, to compare items in the cart, instead of using the Comparator class I have mentioned, you can use the Comparable interface1 and override the compareTo() method.
	You can refer to the Java docs to see the information of this interface. Suppose we are taking this Comparable interface approach.
	- What class should implement the Comparable interface?
	- In those classes, how should you implement the compareTo() method to reflect the ordering that we want?
	- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
	- Suppose the DVDs have a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?
	Answer:
	- Lớp Media nên triển khai Comparable interface, vì cần so sánh các đối tượng của Media với nhau.
	- Phương thức compareTo() đầu tiên sẽ so sánh tiêu đề của 2 đối tượng Media.
	  Nếu tiêu đề không giống nhau sẽ trả về kết quả sau khi so sánh tiêu đề.
	  Nếu tiêu đề giống nhau thì sẽ so sánh giá của 2 đối tượng.
		@Override
		public int compareTo(Media o) {
			// By title
        	int titleCompare = this.title.compareTo(o.title); // return 0 when equal
        	if (titleCompare != 0) {
            	return titleCompare;
        	} else
        		return Float.compare(this.cost, o.cost); // By cost
		}
	- Không thể có 2 quy tắc sắp xếp khác nhau khi sử dụng Comparable interface.
	  Vì phương thức compareTo() chỉ có thể triển khai 1 quy tắc sắp xếp.
	-   @Override
		public int compareTo(Media o) {
			// Kiểm tra o có là DVD không
		    if (!(o instanceof DVD)) {
		        return super.compareTo(o);
		    }
		    DVD oDVD = (DVD) o;
		    int titleCompare = this.title.compareTo(oDVD.title); // So sánh tiêu đề
		    if (titleCompare != 0) {
		        return titleCompare;
		    } else {
		        int lengthCompare = Integer.compare(oDVD.length, this.length); // So sánh chiều dài (giảm dần)
		        if (lengthCompare != 0) {
		            return lengthCompare;
		        } else {
		            return Double.compare(this.cost, otherDVD.cost); // So sánh giá
		        }
		    }
		}
	